// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.972000,HLS_SYN_LAT=9,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=335,HLS_SYN_LUT=636,HLS_VERSION=2024_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [0:0] a_0_WEN_A;
output  [7:0] a_0_Din_A;
input  [7:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [0:0] a_1_WEN_A;
output  [7:0] a_1_Din_A;
input  [7:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [0:0] a_2_WEN_A;
output  [7:0] a_2_Din_A;
input  [7:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [0:0] b_0_WEN_A;
output  [7:0] b_0_Din_A;
input  [7:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [0:0] b_1_WEN_A;
output  [7:0] b_1_Din_A;
input  [7:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [0:0] b_2_WEN_A;
output  [7:0] b_2_Din_A;
input  [7:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_subdone;
reg   [7:0] reg_342;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
reg  signed [7:0] reg_346;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg  signed [7:0] reg_350;
wire    ap_block_pp0_stage0_11001;
wire  signed [15:0] sext_ln26_4_fu_354_p1;
reg  signed [15:0] sext_ln26_4_reg_636;
wire  signed [15:0] sext_ln26_5_fu_358_p1;
reg  signed [15:0] sext_ln26_5_reg_643;
wire  signed [15:0] sext_ln26_8_fu_362_p1;
reg  signed [15:0] sext_ln26_8_reg_655;
wire  signed [15:0] sext_ln26_2_fu_366_p1;
reg  signed [15:0] sext_ln26_2_reg_687;
wire  signed [15:0] sext_ln26_3_fu_370_p1;
reg  signed [15:0] sext_ln26_3_reg_694;
wire  signed [15:0] sext_ln26_7_fu_374_p1;
reg  signed [15:0] sext_ln26_7_reg_706;
wire  signed [15:0] sext_ln26_11_fu_378_p1;
reg  signed [15:0] sext_ln26_11_reg_718;
reg  signed [7:0] a_0_load_1_reg_725;
wire  signed [15:0] sext_ln26_14_fu_382_p1;
reg  signed [15:0] sext_ln26_14_reg_730;
wire  signed [15:0] sext_ln26_fu_386_p1;
reg  signed [15:0] sext_ln26_reg_752;
wire  signed [15:0] sext_ln26_1_fu_390_p1;
reg  signed [15:0] sext_ln26_1_reg_757;
wire  signed [15:0] tmp_fu_394_p2;
wire  signed [15:0] sext_ln26_6_fu_400_p1;
reg  signed [15:0] sext_ln26_6_reg_768;
wire  signed [15:0] tmp_2_fu_404_p2;
wire  signed [15:0] sext_ln26_10_fu_410_p1;
reg  signed [15:0] sext_ln26_10_reg_779;
wire  signed [15:0] sext_ln26_13_fu_414_p1;
reg  signed [15:0] sext_ln26_13_reg_786;
reg   [7:0] a_2_load_2_reg_793;
wire   [15:0] grp_fu_468_p3;
wire    ap_block_pp0_stage4_11001;
wire   [15:0] grp_fu_476_p3;
wire  signed [15:0] sext_ln26_9_fu_418_p1;
reg  signed [15:0] sext_ln26_9_reg_808;
wire  signed [15:0] tmp_4_fu_422_p2;
wire  signed [15:0] sext_ln26_12_fu_427_p1;
reg  signed [15:0] sext_ln26_12_reg_819;
wire  signed [15:0] tmp_6_fu_430_p2;
wire  signed [15:0] sext_ln26_17_fu_435_p1;
reg  signed [15:0] sext_ln26_17_reg_830;
wire   [15:0] grp_fu_502_p3;
wire   [15:0] grp_fu_509_p3;
wire  signed [15:0] tmp_8_fu_438_p2;
wire  signed [15:0] tmp_10_fu_442_p2;
wire  signed [15:0] sext_ln26_16_fu_446_p1;
reg  signed [15:0] sext_ln26_16_reg_857;
wire   [15:0] grp_fu_532_p3;
wire   [15:0] grp_fu_538_p3;
wire  signed [15:0] sext_ln26_15_fu_450_p1;
reg  signed [15:0] sext_ln26_15_reg_874;
wire  signed [15:0] tmp_12_fu_454_p2;
wire  signed [15:0] tmp_14_fu_459_p2;
wire   [15:0] grp_fu_558_p3;
wire   [15:0] grp_fu_565_p3;
wire  signed [15:0] tmp_16_fu_464_p2;
wire   [15:0] grp_fu_588_p3;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
reg    a_0_EN_A_local;
reg   [31:0] a_0_Addr_A_orig;
reg    a_1_EN_A_local;
reg   [31:0] a_1_Addr_A_orig;
reg    a_2_EN_A_local;
reg   [31:0] a_2_Addr_A_orig;
reg    b_0_EN_A_local;
reg   [31:0] b_0_Addr_A_orig;
reg    b_1_EN_A_local;
reg   [31:0] b_1_Addr_A_orig;
reg    b_2_EN_A_local;
reg   [31:0] b_2_Addr_A_orig;
reg    res_we1_local;
reg   [15:0] res_d1_local;
wire   [15:0] grp_fu_484_p3;
reg    res_ce1_local;
reg   [3:0] res_address1_local;
reg    res_we0_local;
reg   [15:0] res_d0_local;
wire   [15:0] grp_fu_493_p3;
reg    res_ce0_local;
reg   [3:0] res_address0_local;
wire   [15:0] grp_fu_516_p3;
wire   [15:0] grp_fu_524_p3;
wire   [15:0] grp_fu_544_p3;
wire   [15:0] grp_fu_551_p3;
wire   [15:0] grp_fu_572_p3;
wire   [15:0] grp_fu_580_p3;
wire   [15:0] grp_fu_594_p3;
wire  signed [7:0] tmp_fu_394_p1;
wire  signed [7:0] tmp_2_fu_404_p1;
wire  signed [7:0] tmp_4_fu_422_p1;
wire  signed [7:0] tmp_6_fu_430_p1;
wire  signed [7:0] tmp_8_fu_438_p0;
wire  signed [7:0] tmp_8_fu_438_p1;
wire  signed [7:0] tmp_10_fu_442_p0;
wire  signed [7:0] tmp_10_fu_442_p1;
wire  signed [7:0] tmp_12_fu_454_p0;
wire  signed [7:0] tmp_12_fu_454_p1;
wire  signed [7:0] tmp_14_fu_459_p0;
wire  signed [7:0] tmp_14_fu_459_p1;
wire  signed [7:0] tmp_16_fu_464_p0;
wire  signed [7:0] tmp_16_fu_464_p1;
wire  signed [7:0] grp_fu_468_p1;
wire  signed [7:0] grp_fu_476_p1;
wire  signed [7:0] grp_fu_484_p1;
wire  signed [7:0] grp_fu_493_p1;
wire  signed [7:0] grp_fu_502_p1;
wire  signed [7:0] grp_fu_509_p1;
wire  signed [7:0] grp_fu_516_p1;
wire  signed [7:0] grp_fu_524_p1;
wire  signed [7:0] grp_fu_532_p0;
wire  signed [7:0] grp_fu_532_p1;
wire  signed [7:0] grp_fu_538_p0;
wire  signed [7:0] grp_fu_538_p1;
wire  signed [7:0] grp_fu_544_p0;
wire  signed [7:0] grp_fu_544_p1;
wire  signed [7:0] grp_fu_551_p0;
wire  signed [7:0] grp_fu_551_p1;
wire  signed [7:0] grp_fu_558_p0;
wire  signed [7:0] grp_fu_558_p1;
wire  signed [7:0] grp_fu_565_p0;
wire  signed [7:0] grp_fu_565_p1;
wire  signed [7:0] grp_fu_572_p0;
wire  signed [7:0] grp_fu_572_p1;
wire  signed [7:0] grp_fu_580_p0;
wire  signed [7:0] grp_fu_580_p1;
wire  signed [7:0] grp_fu_588_p0;
wire  signed [7:0] grp_fu_588_p1;
wire  signed [7:0] grp_fu_594_p0;
wire  signed [7:0] grp_fu_594_p1;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(b_0_Dout_A),
    .din1(tmp_fu_394_p1),
    .dout(tmp_fu_394_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U2(
    .din0(b_1_Dout_A),
    .din1(tmp_2_fu_404_p1),
    .dout(tmp_2_fu_404_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U3(
    .din0(reg_350),
    .din1(tmp_4_fu_422_p1),
    .dout(tmp_4_fu_422_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U4(
    .din0(a_0_load_1_reg_725),
    .din1(tmp_6_fu_430_p1),
    .dout(tmp_6_fu_430_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U5(
    .din0(tmp_8_fu_438_p0),
    .din1(tmp_8_fu_438_p1),
    .dout(tmp_8_fu_438_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U6(
    .din0(tmp_10_fu_442_p0),
    .din1(tmp_10_fu_442_p1),
    .dout(tmp_10_fu_442_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U7(
    .din0(tmp_12_fu_454_p0),
    .din1(tmp_12_fu_454_p1),
    .dout(tmp_12_fu_454_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U8(
    .din0(tmp_14_fu_459_p0),
    .din1(tmp_14_fu_459_p1),
    .dout(tmp_14_fu_459_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U9(
    .din0(tmp_16_fu_464_p0),
    .din1(tmp_16_fu_464_p1),
    .dout(tmp_16_fu_464_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_0_Dout_A),
    .din1(grp_fu_468_p1),
    .din2(tmp_fu_394_p2),
    .ce(1'b1),
    .dout(grp_fu_468_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_Dout_A),
    .din1(grp_fu_476_p1),
    .din2(tmp_2_fu_404_p2),
    .ce(1'b1),
    .dout(grp_fu_476_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_0_Dout_A),
    .din1(grp_fu_484_p1),
    .din2(grp_fu_468_p3),
    .ce(1'b1),
    .dout(grp_fu_484_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_Dout_A),
    .din1(grp_fu_493_p1),
    .din2(grp_fu_476_p3),
    .ce(1'b1),
    .dout(grp_fu_493_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_350),
    .din1(grp_fu_502_p1),
    .din2(tmp_4_fu_422_p2),
    .ce(1'b1),
    .dout(grp_fu_502_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_2_Dout_A),
    .din1(grp_fu_509_p1),
    .din2(tmp_6_fu_430_p2),
    .ce(1'b1),
    .dout(grp_fu_509_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_350),
    .din1(grp_fu_516_p1),
    .din2(grp_fu_502_p3),
    .ce(1'b1),
    .dout(grp_fu_516_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_346),
    .din1(grp_fu_524_p1),
    .din2(grp_fu_509_p3),
    .ce(1'b1),
    .dout(grp_fu_524_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_532_p0),
    .din1(grp_fu_532_p1),
    .din2(tmp_8_fu_438_p2),
    .ce(1'b1),
    .dout(grp_fu_532_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_538_p0),
    .din1(grp_fu_538_p1),
    .din2(tmp_10_fu_442_p2),
    .ce(1'b1),
    .dout(grp_fu_538_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_544_p0),
    .din1(grp_fu_544_p1),
    .din2(grp_fu_532_p3),
    .ce(1'b1),
    .dout(grp_fu_544_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_551_p0),
    .din1(grp_fu_551_p1),
    .din2(grp_fu_538_p3),
    .ce(1'b1),
    .dout(grp_fu_551_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_558_p0),
    .din1(grp_fu_558_p1),
    .din2(tmp_12_fu_454_p2),
    .ce(1'b1),
    .dout(grp_fu_558_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_565_p0),
    .din1(grp_fu_565_p1),
    .din2(tmp_14_fu_459_p2),
    .ce(1'b1),
    .dout(grp_fu_565_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_572_p0),
    .din1(grp_fu_572_p1),
    .din2(grp_fu_558_p3),
    .ce(1'b1),
    .dout(grp_fu_572_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_580_p0),
    .din1(grp_fu_580_p1),
    .din2(grp_fu_565_p3),
    .ce(1'b1),
    .dout(grp_fu_580_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_588_p0),
    .din1(grp_fu_588_p1),
    .din2(tmp_16_fu_464_p2),
    .ce(1'b1),
    .dout(grp_fu_588_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_594_p0),
    .din1(grp_fu_594_p1),
    .din2(grp_fu_588_p3),
    .ce(1'b1),
    .dout(grp_fu_594_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_0_load_1_reg_725 <= a_0_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_2_load_2_reg_793 <= a_2_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_342 <= a_0_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_346 <= a_1_Dout_A;
        reg_350 <= b_2_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sext_ln26_10_reg_779 <= sext_ln26_10_fu_410_p1;
        sext_ln26_13_reg_786 <= sext_ln26_13_fu_414_p1;
        sext_ln26_1_reg_757 <= sext_ln26_1_fu_390_p1;
        sext_ln26_6_reg_768 <= sext_ln26_6_fu_400_p1;
        sext_ln26_reg_752 <= sext_ln26_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sext_ln26_11_reg_718 <= sext_ln26_11_fu_378_p1;
        sext_ln26_14_reg_730 <= sext_ln26_14_fu_382_p1;
        sext_ln26_2_reg_687 <= sext_ln26_2_fu_366_p1;
        sext_ln26_3_reg_694 <= sext_ln26_3_fu_370_p1;
        sext_ln26_7_reg_706 <= sext_ln26_7_fu_374_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sext_ln26_12_reg_819 <= sext_ln26_12_fu_427_p1;
        sext_ln26_17_reg_830 <= sext_ln26_17_fu_435_p1;
        sext_ln26_9_reg_808 <= sext_ln26_9_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sext_ln26_15_reg_874 <= sext_ln26_15_fu_450_p1;
        sext_ln26_4_reg_636 <= sext_ln26_4_fu_354_p1;
        sext_ln26_5_reg_643 <= sext_ln26_5_fu_358_p1;
        sext_ln26_8_reg_655 <= sext_ln26_8_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln26_16_reg_857 <= sext_ln26_16_fu_446_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_0_Addr_A_orig = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_0_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_0_Addr_A_orig = 64'd0;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_0_EN_A_local = 1'b1;
    end else begin
        a_0_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_1_Addr_A_orig = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_1_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_1_Addr_A_orig = 64'd0;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_1_EN_A_local = 1'b1;
    end else begin
        a_1_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_2_Addr_A_orig = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_2_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_2_Addr_A_orig = 64'd0;
        end else begin
            a_2_Addr_A_orig = 'bx;
        end
    end else begin
        a_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_2_EN_A_local = 1'b1;
    end else begin
        a_2_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_0_Addr_A_orig = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_0_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_0_Addr_A_orig = 64'd2;
        end else begin
            b_0_Addr_A_orig = 'bx;
        end
    end else begin
        b_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_0_EN_A_local = 1'b1;
    end else begin
        b_0_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_1_Addr_A_orig = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_1_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_1_Addr_A_orig = 64'd2;
        end else begin
            b_1_Addr_A_orig = 'bx;
        end
    end else begin
        b_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_1_EN_A_local = 1'b1;
    end else begin
        b_1_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_2_Addr_A_orig = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_2_Addr_A_orig = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_2_Addr_A_orig = 64'd2;
        end else begin
            b_2_Addr_A_orig = 'bx;
        end
    end else begin
        b_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_2_EN_A_local = 1'b1;
    end else begin
        b_2_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            res_address0_local = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            res_address0_local = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            res_address0_local = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            res_address0_local = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            res_address0_local = 64'd1;
        end else begin
            res_address0_local = 'bx;
        end
    end else begin
        res_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            res_address1_local = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            res_address1_local = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            res_address1_local = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            res_address1_local = 64'd0;
        end else begin
            res_address1_local = 'bx;
        end
    end else begin
        res_address1_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_ce0_local = 1'b1;
    end else begin
        res_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_ce1_local = 1'b1;
    end else begin
        res_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            res_d0_local = grp_fu_594_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            res_d0_local = grp_fu_580_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            res_d0_local = grp_fu_551_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            res_d0_local = grp_fu_524_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            res_d0_local = grp_fu_493_p3;
        end else begin
            res_d0_local = 'bx;
        end
    end else begin
        res_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            res_d1_local = grp_fu_572_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            res_d1_local = grp_fu_544_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            res_d1_local = grp_fu_516_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            res_d1_local = grp_fu_484_p3;
        end else begin
            res_d1_local = 'bx;
        end
    end else begin
        res_d1_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_we0_local = 1'b1;
    end else begin
        res_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_we1_local = 1'b1;
    end else begin
        res_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << 32'd0;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = 8'd0;

assign a_0_EN_A = a_0_EN_A_local;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = 1'd0;

assign a_1_Addr_A = a_1_Addr_A_orig << 32'd0;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = 8'd0;

assign a_1_EN_A = a_1_EN_A_local;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = 1'd0;

assign a_2_Addr_A = a_2_Addr_A_orig << 32'd0;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = 8'd0;

assign a_2_EN_A = a_2_EN_A_local;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = 1'd0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_0_Addr_A = b_0_Addr_A_orig << 32'd0;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = 8'd0;

assign b_0_EN_A = b_0_EN_A_local;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = 1'd0;

assign b_1_Addr_A = b_1_Addr_A_orig << 32'd0;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = 8'd0;

assign b_1_EN_A = b_1_EN_A_local;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = 1'd0;

assign b_2_Addr_A = b_2_Addr_A_orig << 32'd0;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = 8'd0;

assign b_2_EN_A = b_2_EN_A_local;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = 1'd0;

assign grp_fu_468_p1 = sext_ln26_4_fu_354_p1;

assign grp_fu_476_p1 = sext_ln26_4_fu_354_p1;

assign grp_fu_484_p1 = sext_ln26_2_fu_366_p1;

assign grp_fu_493_p1 = sext_ln26_2_fu_366_p1;

assign grp_fu_502_p1 = sext_ln26_4_reg_636;

assign grp_fu_509_p1 = sext_ln26_5_reg_643;

assign grp_fu_516_p1 = sext_ln26_2_reg_687;

assign grp_fu_524_p1 = sext_ln26_3_reg_694;

assign grp_fu_532_p0 = sext_ln26_14_reg_730;

assign grp_fu_532_p1 = sext_ln26_8_reg_655;

assign grp_fu_538_p0 = sext_ln26_14_reg_730;

assign grp_fu_538_p1 = sext_ln26_11_reg_718;

assign grp_fu_544_p0 = sext_ln26_13_reg_786;

assign grp_fu_544_p1 = sext_ln26_7_reg_706;

assign grp_fu_551_p0 = sext_ln26_13_reg_786;

assign grp_fu_551_p1 = sext_ln26_10_reg_779;

assign grp_fu_558_p0 = sext_ln26_17_fu_435_p1;

assign grp_fu_558_p1 = sext_ln26_5_reg_643;

assign grp_fu_565_p0 = sext_ln26_17_fu_435_p1;

assign grp_fu_565_p1 = sext_ln26_8_reg_655;

assign grp_fu_572_p0 = sext_ln26_16_fu_446_p1;

assign grp_fu_572_p1 = sext_ln26_3_reg_694;

assign grp_fu_580_p0 = sext_ln26_16_fu_446_p1;

assign grp_fu_580_p1 = sext_ln26_7_reg_706;

assign grp_fu_588_p0 = sext_ln26_17_reg_830;

assign grp_fu_588_p1 = sext_ln26_11_reg_718;

assign grp_fu_594_p0 = sext_ln26_16_reg_857;

assign grp_fu_594_p1 = sext_ln26_10_reg_779;

assign res_address0 = res_address0_local;

assign res_address1 = res_address1_local;

assign res_ce0 = res_ce0_local;

assign res_ce1 = res_ce1_local;

assign res_d0 = res_d0_local;

assign res_d1 = res_d1_local;

assign res_we0 = res_we0_local;

assign res_we1 = res_we1_local;

assign sext_ln26_10_fu_410_p1 = reg_350;

assign sext_ln26_11_fu_378_p1 = reg_350;

assign sext_ln26_12_fu_427_p1 = a_0_load_1_reg_725;

assign sext_ln26_13_fu_414_p1 = reg_346;

assign sext_ln26_14_fu_382_p1 = $signed(a_2_Dout_A);

assign sext_ln26_15_fu_450_p1 = $signed(reg_342);

assign sext_ln26_16_fu_446_p1 = reg_346;

assign sext_ln26_17_fu_435_p1 = $signed(a_2_load_2_reg_793);

assign sext_ln26_1_fu_390_p1 = $signed(b_0_Dout_A);

assign sext_ln26_2_fu_366_p1 = reg_346;

assign sext_ln26_3_fu_370_p1 = $signed(b_0_Dout_A);

assign sext_ln26_4_fu_354_p1 = $signed(a_2_Dout_A);

assign sext_ln26_5_fu_358_p1 = $signed(b_0_Dout_A);

assign sext_ln26_6_fu_400_p1 = $signed(b_1_Dout_A);

assign sext_ln26_7_fu_374_p1 = $signed(b_1_Dout_A);

assign sext_ln26_8_fu_362_p1 = $signed(b_1_Dout_A);

assign sext_ln26_9_fu_418_p1 = reg_350;

assign sext_ln26_fu_386_p1 = $signed(reg_342);

assign tmp_10_fu_442_p0 = sext_ln26_12_reg_819;

assign tmp_10_fu_442_p1 = sext_ln26_9_reg_808;

assign tmp_12_fu_454_p0 = sext_ln26_15_fu_450_p1;

assign tmp_12_fu_454_p1 = sext_ln26_1_reg_757;

assign tmp_14_fu_459_p0 = sext_ln26_15_fu_450_p1;

assign tmp_14_fu_459_p1 = sext_ln26_6_reg_768;

assign tmp_16_fu_464_p0 = sext_ln26_15_reg_874;

assign tmp_16_fu_464_p1 = sext_ln26_9_reg_808;

assign tmp_2_fu_404_p1 = sext_ln26_fu_386_p1;

assign tmp_4_fu_422_p1 = sext_ln26_reg_752;

assign tmp_6_fu_430_p1 = sext_ln26_1_reg_757;

assign tmp_8_fu_438_p0 = sext_ln26_12_reg_819;

assign tmp_8_fu_438_p1 = sext_ln26_6_reg_768;

assign tmp_fu_394_p1 = sext_ln26_fu_386_p1;

endmodule //matrixmul
