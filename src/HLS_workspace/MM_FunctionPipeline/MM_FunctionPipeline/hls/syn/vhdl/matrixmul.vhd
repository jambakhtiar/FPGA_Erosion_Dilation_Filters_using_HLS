-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.972000,HLS_SYN_LAT=9,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=335,HLS_SYN_LUT=636,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln26_4_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_4_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_5_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_5_reg_643 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_8_fu_362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_8_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_2_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_2_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_3_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_3_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_7_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_7_reg_706 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_11_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_11_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_load_1_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln26_14_fu_382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_14_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_1_fu_390_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_1_reg_757 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_6_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_6_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_10_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_10_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_13_fu_414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_13_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_load_2_reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_468_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_476_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_9_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_9_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_12_fu_427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_12_reg_819 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_17_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_17_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_502_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_509_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_16_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_16_reg_857 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_15_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_15_reg_874 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal a_0_EN_A_local : STD_LOGIC;
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_EN_A_local : STD_LOGIC;
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_EN_A_local : STD_LOGIC;
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_EN_A_local : STD_LOGIC;
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_EN_A_local : STD_LOGIC;
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_EN_A_local : STD_LOGIC;
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal res_we1_local : STD_LOGIC;
    signal res_d1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_484_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_ce1_local : STD_LOGIC;
    signal res_address1_local : STD_LOGIC_VECTOR (3 downto 0);
    signal res_we0_local : STD_LOGIC;
    signal res_d0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_ce0_local : STD_LOGIC;
    signal res_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_438_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_442_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_454_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_459_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_459_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_464_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_484_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_524_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_544_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_544_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_588_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_Dout_A,
        din1 => tmp_fu_394_p1,
        dout => tmp_fu_394_p2);

    mul_8s_8s_16_1_1_U2 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_Dout_A,
        din1 => tmp_2_fu_404_p1,
        dout => tmp_2_fu_404_p2);

    mul_8s_8s_16_1_1_U3 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_350,
        din1 => tmp_4_fu_422_p1,
        dout => tmp_4_fu_422_p2);

    mul_8s_8s_16_1_1_U4 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => a_0_load_1_reg_725,
        din1 => tmp_6_fu_430_p1,
        dout => tmp_6_fu_430_p2);

    mul_8s_8s_16_1_1_U5 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_8_fu_438_p0,
        din1 => tmp_8_fu_438_p1,
        dout => tmp_8_fu_438_p2);

    mul_8s_8s_16_1_1_U6 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_10_fu_442_p0,
        din1 => tmp_10_fu_442_p1,
        dout => tmp_10_fu_442_p2);

    mul_8s_8s_16_1_1_U7 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_12_fu_454_p0,
        din1 => tmp_12_fu_454_p1,
        dout => tmp_12_fu_454_p2);

    mul_8s_8s_16_1_1_U8 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_14_fu_459_p0,
        din1 => tmp_14_fu_459_p1,
        dout => tmp_14_fu_459_p2);

    mul_8s_8s_16_1_1_U9 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_16_fu_464_p0,
        din1 => tmp_16_fu_464_p1,
        dout => tmp_16_fu_464_p2);

    mac_muladd_8s_8s_16s_16_4_1_U10 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_0_Dout_A,
        din1 => grp_fu_468_p1,
        din2 => tmp_fu_394_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_468_p3);

    mac_muladd_8s_8s_16s_16_4_1_U11 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_Dout_A,
        din1 => grp_fu_476_p1,
        din2 => tmp_2_fu_404_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U12 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_0_Dout_A,
        din1 => grp_fu_484_p1,
        din2 => grp_fu_468_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U13 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_Dout_A,
        din1 => grp_fu_493_p1,
        din2 => grp_fu_476_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_493_p3);

    mac_muladd_8s_8s_16s_16_4_1_U14 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_350,
        din1 => grp_fu_502_p1,
        din2 => tmp_4_fu_422_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_502_p3);

    mac_muladd_8s_8s_16s_16_4_1_U15 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_2_Dout_A,
        din1 => grp_fu_509_p1,
        din2 => tmp_6_fu_430_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U16 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_350,
        din1 => grp_fu_516_p1,
        din2 => grp_fu_502_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U17 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_346,
        din1 => grp_fu_524_p1,
        din2 => grp_fu_509_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p3);

    mac_muladd_8s_8s_16s_16_4_1_U18 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        din2 => tmp_8_fu_438_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p3);

    mac_muladd_8s_8s_16s_16_4_1_U19 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_538_p0,
        din1 => grp_fu_538_p1,
        din2 => tmp_10_fu_442_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U20 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_544_p0,
        din1 => grp_fu_544_p1,
        din2 => grp_fu_532_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_544_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U21 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_551_p0,
        din1 => grp_fu_551_p1,
        din2 => grp_fu_538_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p3);

    mac_muladd_8s_8s_16s_16_4_1_U22 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_558_p0,
        din1 => grp_fu_558_p1,
        din2 => tmp_12_fu_454_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p3);

    mac_muladd_8s_8s_16s_16_4_1_U23 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        din2 => tmp_14_fu_459_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U24 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_572_p0,
        din1 => grp_fu_572_p1,
        din2 => grp_fu_558_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U25 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_580_p0,
        din1 => grp_fu_580_p1,
        din2 => grp_fu_565_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p3);

    mac_muladd_8s_8s_16s_16_4_1_U26 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_588_p0,
        din1 => grp_fu_588_p1,
        din2 => tmp_16_fu_464_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U27 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_594_p0,
        din1 => grp_fu_594_p1,
        din2 => grp_fu_588_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_594_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                a_0_load_1_reg_725 <= a_0_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                a_2_load_2_reg_793 <= a_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_342 <= a_0_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_346 <= a_1_Dout_A;
                reg_350 <= b_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sext_ln26_10_reg_779 <= sext_ln26_10_fu_410_p1;
                sext_ln26_13_reg_786 <= sext_ln26_13_fu_414_p1;
                sext_ln26_1_reg_757 <= sext_ln26_1_fu_390_p1;
                sext_ln26_6_reg_768 <= sext_ln26_6_fu_400_p1;
                sext_ln26_reg_752 <= sext_ln26_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln26_11_reg_718 <= sext_ln26_11_fu_378_p1;
                sext_ln26_14_reg_730 <= sext_ln26_14_fu_382_p1;
                sext_ln26_2_reg_687 <= sext_ln26_2_fu_366_p1;
                sext_ln26_3_reg_694 <= sext_ln26_3_fu_370_p1;
                sext_ln26_7_reg_706 <= sext_ln26_7_fu_374_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sext_ln26_12_reg_819 <= sext_ln26_12_fu_427_p1;
                sext_ln26_17_reg_830 <= sext_ln26_17_fu_435_p1;
                sext_ln26_9_reg_808 <= sext_ln26_9_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sext_ln26_15_reg_874 <= sext_ln26_15_fu_450_p1;
                sext_ln26_4_reg_636 <= sext_ln26_4_fu_354_p1;
                sext_ln26_5_reg_643 <= sext_ln26_5_fu_358_p1;
                sext_ln26_8_reg_655 <= sext_ln26_8_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln26_16_reg_857 <= sext_ln26_16_fu_446_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_0_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_0_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_0_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv8_0;
    a_0_EN_A <= a_0_EN_A_local;

    a_0_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_0_EN_A_local <= ap_const_logic_1;
        else 
            a_0_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv1_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_1_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_1_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_1_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            else 
                a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv8_0;
    a_1_EN_A <= a_1_EN_A_local;

    a_1_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_1_EN_A_local <= ap_const_logic_1;
        else 
            a_1_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv1_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_2_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_2_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_2_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            else 
                a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv8_0;
    a_2_EN_A <= a_2_EN_A_local;

    a_2_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_2_EN_A_local <= ap_const_logic_1;
        else 
            a_2_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv1_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                b_0_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_0_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_0_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            else 
                b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv8_0;
    b_0_EN_A <= b_0_EN_A_local;

    b_0_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_0_EN_A_local <= ap_const_logic_1;
        else 
            b_0_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv1_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                b_1_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_1_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_1_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            else 
                b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv8_0;
    b_1_EN_A <= b_1_EN_A_local;

    b_1_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_1_EN_A_local <= ap_const_logic_1;
        else 
            b_1_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv1_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                b_2_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_2_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_2_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            else 
                b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv8_0;
    b_2_EN_A <= b_2_EN_A_local;

    b_2_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_2_EN_A_local <= ap_const_logic_1;
        else 
            b_2_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv1_0;
    grp_fu_468_p1 <= sext_ln26_4_fu_354_p1(8 - 1 downto 0);
    grp_fu_476_p1 <= sext_ln26_4_fu_354_p1(8 - 1 downto 0);
    grp_fu_484_p1 <= sext_ln26_2_fu_366_p1(8 - 1 downto 0);
    grp_fu_493_p1 <= sext_ln26_2_fu_366_p1(8 - 1 downto 0);
    grp_fu_502_p1 <= sext_ln26_4_reg_636(8 - 1 downto 0);
    grp_fu_509_p1 <= sext_ln26_5_reg_643(8 - 1 downto 0);
    grp_fu_516_p1 <= sext_ln26_2_reg_687(8 - 1 downto 0);
    grp_fu_524_p1 <= sext_ln26_3_reg_694(8 - 1 downto 0);
    grp_fu_532_p0 <= sext_ln26_14_reg_730(8 - 1 downto 0);
    grp_fu_532_p1 <= sext_ln26_8_reg_655(8 - 1 downto 0);
    grp_fu_538_p0 <= sext_ln26_14_reg_730(8 - 1 downto 0);
    grp_fu_538_p1 <= sext_ln26_11_reg_718(8 - 1 downto 0);
    grp_fu_544_p0 <= sext_ln26_13_reg_786(8 - 1 downto 0);
    grp_fu_544_p1 <= sext_ln26_7_reg_706(8 - 1 downto 0);
    grp_fu_551_p0 <= sext_ln26_13_reg_786(8 - 1 downto 0);
    grp_fu_551_p1 <= sext_ln26_10_reg_779(8 - 1 downto 0);
    grp_fu_558_p0 <= sext_ln26_17_fu_435_p1(8 - 1 downto 0);
    grp_fu_558_p1 <= sext_ln26_5_reg_643(8 - 1 downto 0);
    grp_fu_565_p0 <= sext_ln26_17_fu_435_p1(8 - 1 downto 0);
    grp_fu_565_p1 <= sext_ln26_8_reg_655(8 - 1 downto 0);
    grp_fu_572_p0 <= sext_ln26_16_fu_446_p1(8 - 1 downto 0);
    grp_fu_572_p1 <= sext_ln26_3_reg_694(8 - 1 downto 0);
    grp_fu_580_p0 <= sext_ln26_16_fu_446_p1(8 - 1 downto 0);
    grp_fu_580_p1 <= sext_ln26_7_reg_706(8 - 1 downto 0);
    grp_fu_588_p0 <= sext_ln26_17_reg_830(8 - 1 downto 0);
    grp_fu_588_p1 <= sext_ln26_11_reg_718(8 - 1 downto 0);
    grp_fu_594_p0 <= sext_ln26_16_reg_857(8 - 1 downto 0);
    grp_fu_594_p1 <= sext_ln26_10_reg_779(8 - 1 downto 0);
    res_address0 <= res_address0_local;

    res_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_address0_local <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_address0_local <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_address0_local <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_address0_local <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_address0_local <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                res_address0_local <= "XXXX";
            end if;
        else 
            res_address0_local <= "XXXX";
        end if; 
    end process;

    res_address1 <= res_address1_local;

    res_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_address1_local <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_address1_local <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_address1_local <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_address1_local <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                res_address1_local <= "XXXX";
            end if;
        else 
            res_address1_local <= "XXXX";
        end if; 
    end process;

    res_ce0 <= res_ce0_local;

    res_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce0_local <= ap_const_logic_1;
        else 
            res_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    res_ce1 <= res_ce1_local;

    res_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce1_local <= ap_const_logic_1;
        else 
            res_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= res_d0_local;

    res_d0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, grp_fu_493_p3, grp_fu_524_p3, grp_fu_551_p3, grp_fu_580_p3, grp_fu_594_p3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_d0_local <= grp_fu_594_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_d0_local <= grp_fu_580_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_d0_local <= grp_fu_551_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_d0_local <= grp_fu_524_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_d0_local <= grp_fu_493_p3;
            else 
                res_d0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            res_d0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_d1 <= res_d1_local;

    res_d1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, grp_fu_484_p3, grp_fu_516_p3, grp_fu_544_p3, grp_fu_572_p3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_d1_local <= grp_fu_572_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_d1_local <= grp_fu_544_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_d1_local <= grp_fu_516_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_d1_local <= grp_fu_484_p3;
            else 
                res_d1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            res_d1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_we0 <= res_we0_local;

    res_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we0_local <= ap_const_logic_1;
        else 
            res_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    res_we1 <= res_we1_local;

    res_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we1_local <= ap_const_logic_1;
        else 
            res_we1_local <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln26_10_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_350),16));

        sext_ln26_11_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_350),16));

        sext_ln26_12_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_0_load_1_reg_725),16));

        sext_ln26_13_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_346),16));

        sext_ln26_14_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_2_Dout_A),16));

        sext_ln26_15_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_342),16));

        sext_ln26_16_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_346),16));

        sext_ln26_17_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_2_load_2_reg_793),16));

        sext_ln26_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_Dout_A),16));

        sext_ln26_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_346),16));

        sext_ln26_3_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_Dout_A),16));

        sext_ln26_4_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_2_Dout_A),16));

        sext_ln26_5_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_Dout_A),16));

        sext_ln26_6_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_Dout_A),16));

        sext_ln26_7_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_Dout_A),16));

        sext_ln26_8_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_Dout_A),16));

        sext_ln26_9_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_350),16));

        sext_ln26_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_342),16));

    tmp_10_fu_442_p0 <= sext_ln26_12_reg_819(8 - 1 downto 0);
    tmp_10_fu_442_p1 <= sext_ln26_9_reg_808(8 - 1 downto 0);
    tmp_12_fu_454_p0 <= sext_ln26_15_fu_450_p1(8 - 1 downto 0);
    tmp_12_fu_454_p1 <= sext_ln26_1_reg_757(8 - 1 downto 0);
    tmp_14_fu_459_p0 <= sext_ln26_15_fu_450_p1(8 - 1 downto 0);
    tmp_14_fu_459_p1 <= sext_ln26_6_reg_768(8 - 1 downto 0);
    tmp_16_fu_464_p0 <= sext_ln26_15_reg_874(8 - 1 downto 0);
    tmp_16_fu_464_p1 <= sext_ln26_9_reg_808(8 - 1 downto 0);
    tmp_2_fu_404_p1 <= sext_ln26_fu_386_p1(8 - 1 downto 0);
    tmp_4_fu_422_p1 <= sext_ln26_reg_752(8 - 1 downto 0);
    tmp_6_fu_430_p1 <= sext_ln26_1_reg_757(8 - 1 downto 0);
    tmp_8_fu_438_p0 <= sext_ln26_12_reg_819(8 - 1 downto 0);
    tmp_8_fu_438_p1 <= sext_ln26_6_reg_768(8 - 1 downto 0);
    tmp_fu_394_p1 <= sext_ln26_fu_386_p1(8 - 1 downto 0);
end behav;
