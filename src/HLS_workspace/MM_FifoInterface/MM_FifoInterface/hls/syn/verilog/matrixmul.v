// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.108000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=116,HLS_SYN_LUT=330,HLS_VERSION=2024_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_1_dout,
        b_1_empty_n,
        b_1_read,
        b_0_dout,
        b_0_empty_n,
        b_0_read,
        b_2_dout,
        b_2_empty_n,
        b_2_read,
        a_0_dout,
        a_0_empty_n,
        a_0_read,
        a_1_dout,
        a_1_empty_n,
        a_1_read,
        a_2_dout,
        a_2_empty_n,
        a_2_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] b_1_dout;
input   b_1_empty_n;
output   b_1_read;
input  [7:0] b_0_dout;
input   b_0_empty_n;
output   b_0_read;
input  [7:0] b_2_dout;
input   b_2_empty_n;
output   b_2_read;
input  [7:0] a_0_dout;
input   a_0_empty_n;
output   a_0_read;
input  [7:0] a_1_dout;
input   a_1_empty_n;
output   a_1_read;
input  [7:0] a_2_dout;
input   a_2_empty_n;
output   a_2_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
reg   [1:0] select_ln16_reg_273;
reg    ap_predicate_op45_read_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_subdone;
wire   [0:0] icmp_ln19_fu_204_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_0_blk_n;
wire    ap_block_pp0_stage0;
reg    a_1_blk_n;
reg    a_2_blk_n;
reg    b_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
reg    b_1_blk_n;
reg    b_2_blk_n;
reg    res_blk_n;
wire   [1:0] select_ln16_fu_170_p3;
reg    ap_predicate_op57_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln21_fu_184_p2;
reg   [0:0] icmp_ln21_reg_277;
reg   [7:0] b_1_read_reg_282;
reg    ap_predicate_op40_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] b_0_read_reg_287;
reg   [7:0] b_2_read_reg_292;
reg   [7:0] b_1_read_1_reg_297;
reg    ap_block_pp0_stage2_11001;
reg   [7:0] b_0_read_1_reg_302;
reg   [7:0] b_2_read_1_reg_307;
reg   [0:0] icmp_ln19_reg_312;
reg   [0:0] icmp_ln19_reg_312_pp0_iter1_reg;
reg  signed [7:0] a_0_read_reg_316;
reg  signed [7:0] a_1_read_reg_321;
wire   [15:0] mul_ln26_1_fu_237_p2;
reg  signed [15:0] mul_ln26_1_reg_346;
wire   [15:0] grp_fu_243_p3;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] ap_phi_mux_icmp_ln214_phi_fu_114_p4;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
reg  signed [7:0] ap_phi_mux_empty_6_phi_fu_124_p6;
wire   [7:0] ap_phi_reg_pp0_iter1_empty_6_reg_121;
wire   [7:0] ap_phi_reg_pp0_iter0_empty_reg_135;
reg  signed [7:0] ap_phi_reg_pp0_iter1_empty_reg_135;
wire   [7:0] ap_phi_reg_pp0_iter0_empty_5_reg_146;
reg  signed [7:0] ap_phi_reg_pp0_iter1_empty_5_reg_146;
reg   [3:0] indvar_flatten2_fu_60;
wire   [3:0] add_ln19_fu_198_p2;
reg   [1:0] j3_fu_64;
wire   [1:0] j_fu_178_p2;
reg   [1:0] ap_sig_allocacmp_j3_load;
reg    b_1_read_local;
reg    b_0_read_local;
reg    b_2_read_local;
reg    a_0_read_local;
reg    a_1_read_local;
reg    a_2_read_local;
wire   [15:0] grp_fu_250_p3;
reg    ap_block_pp0_stage1_01001;
reg    res_write_local;
reg    grp_fu_243_ce;
reg    grp_fu_250_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_437;
reg    ap_condition_441;
reg    ap_condition_181;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten2_fu_60 = 4'd0;
#0 j3_fu_64 = 2'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(ap_phi_reg_pp0_iter1_empty_reg_135),
    .din1(a_1_read_reg_321),
    .dout(mul_ln26_1_fu_237_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_empty_6_phi_fu_124_p6),
    .din1(a_2_dout),
    .din2(mul_ln26_1_reg_346),
    .ce(grp_fu_243_ce),
    .dout(grp_fu_243_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_reg_pp0_iter1_empty_5_reg_146),
    .din1(a_0_read_reg_316),
    .din2(grp_fu_243_p3),
    .ce(grp_fu_250_ce),
    .dout(grp_fu_250_p3)
);

matrixmul_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_5_reg_146 <= b_2_read_reg_292;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_5_reg_146 <= b_1_read_reg_282;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_5_reg_146 <= b_0_read_reg_287;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter1_empty_5_reg_146 <= ap_phi_reg_pp0_iter0_empty_5_reg_146;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_135 <= b_2_read_1_reg_307;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_135 <= b_1_read_1_reg_297;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_135 <= b_0_read_1_reg_302;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter1_empty_reg_135 <= ap_phi_reg_pp0_iter0_empty_reg_135;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_441)) begin
            indvar_flatten2_fu_60 <= 4'd0;
        end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            indvar_flatten2_fu_60 <= add_ln19_fu_198_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        j3_fu_64 <= j_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_read_reg_316 <= a_0_dout;
        a_1_read_reg_321 <= a_1_dout;
        select_ln16_reg_273 <= select_ln16_fu_170_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_0_read_1_reg_302 <= b_0_dout;
        b_1_read_1_reg_297 <= b_1_dout;
        b_2_read_1_reg_307 <= b_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_0_read_reg_287 <= b_0_dout;
        b_1_read_reg_282 <= b_1_dout;
        b_2_read_reg_292 <= b_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln19_reg_312 <= icmp_ln19_fu_204_p2;
        icmp_ln19_reg_312_pp0_iter1_reg <= icmp_ln19_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_277 <= icmp_ln21_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln26_1_reg_346 <= mul_ln26_1_fu_237_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_blk_n = a_0_empty_n;
    end else begin
        a_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_read_local = 1'b1;
    end else begin
        a_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_blk_n = a_1_empty_n;
    end else begin
        a_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_read_local = 1'b1;
    end else begin
        a_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_2_blk_n = a_2_empty_n;
    end else begin
        a_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_2_read_local = 1'b1;
    end else begin
        a_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_204_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_312_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1))) begin
        ap_phi_mux_empty_6_phi_fu_124_p6 = b_2_dout;
    end else if ((select_ln16_reg_273 == 2'd1)) begin
        ap_phi_mux_empty_6_phi_fu_124_p6 = b_1_dout;
    end else if ((select_ln16_reg_273 == 2'd0)) begin
        ap_phi_mux_empty_6_phi_fu_124_p6 = b_0_dout;
    end else begin
        ap_phi_mux_empty_6_phi_fu_124_p6 = ap_phi_reg_pp0_iter1_empty_6_reg_121;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_437)) begin
            ap_phi_mux_icmp_ln214_phi_fu_114_p4 = icmp_ln21_reg_277;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln214_phi_fu_114_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln214_phi_fu_114_p4 = icmp_ln21_reg_277;
        end
    end else begin
        ap_phi_mux_icmp_ln214_phi_fu_114_p4 = icmp_ln21_reg_277;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j3_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j3_load = j3_fu_64;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_0_blk_n = b_0_empty_n;
    end else begin
        b_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_0_read_local = 1'b1;
    end else begin
        b_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_1_blk_n = b_1_empty_n;
    end else begin
        b_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln16_reg_273 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_1_read_local = 1'b1;
    end else begin
        b_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | (~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (ap_predicate_op45_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_2_blk_n = b_2_empty_n;
    end else begin
        b_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op45_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op40_read_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_read_state4 == 1'b1)))) begin
        b_2_read_local = 1'b1;
    end else begin
        b_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_243_ce = 1'b1;
    end else begin
        grp_fu_243_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_250_ce = 1'b1;
    end else begin
        grp_fu_250_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_write_local = 1'b1;
    end else begin
        res_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_read = a_0_read_local;

assign a_1_read = a_1_read_local;

assign a_2_read = a_2_read_local;

assign add_ln19_fu_198_p2 = (indvar_flatten2_fu_60 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage1_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage1_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage1_iter2)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((b_2_empty_n == 1'b0) & (ap_predicate_op40_read_state2 == 1'b1)) | ((b_0_empty_n == 1'b0) & (select_ln16_reg_273 == 2'd0)) | ((select_ln16_reg_273 == 2'd1) & (b_1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (((ap_predicate_op45_read_state3 == 1'b1) & (b_2_empty_n == 1'b0)) | ((b_0_empty_n == 1'b0) & (select_ln16_reg_273 == 2'd0)) | ((select_ln16_reg_273 == 2'd1) & (b_1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == a_2_empty_n) | (1'b0 == a_1_empty_n) | (1'b0 == a_0_empty_n) | ((b_2_empty_n == 1'b0) & (ap_predicate_op57_read_state4 == 1'b1)) | ((b_0_empty_n == 1'b0) & (select_ln16_reg_273 == 2'd0)) | ((select_ln16_reg_273 == 2'd1) & (b_1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2 = (res_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_181 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_437 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_reg_312 == 1'd0));
end

always @ (*) begin
    ap_condition_441 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_phi_reg_pp0_iter0_empty_5_reg_146 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_135 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_6_reg_121 = 'bx;

always @ (*) begin
    ap_predicate_op40_read_state2 = (~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1));
end

always @ (*) begin
    ap_predicate_op45_read_state3 = (~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1));
end

always @ (*) begin
    ap_predicate_op57_read_state4 = (~(select_ln16_reg_273 == 2'd0) & ~(select_ln16_reg_273 == 2'd1));
end

assign ap_ready = ap_ready_sig;

assign b_0_read = b_0_read_local;

assign b_1_read = b_1_read_local;

assign b_2_read = b_2_read_local;

assign icmp_ln19_fu_204_p2 = ((indvar_flatten2_fu_60 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_184_p2 = ((j_fu_178_p2 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_178_p2 = (select_ln16_fu_170_p3 + 2'd1);

assign res_din = grp_fu_250_p3;

assign res_write = res_write_local;

assign select_ln16_fu_170_p3 = ((ap_phi_mux_icmp_ln214_phi_fu_114_p4[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j3_load);

endmodule //matrixmul
