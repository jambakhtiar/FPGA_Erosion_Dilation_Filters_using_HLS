// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.425000,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=29,HLS_SYN_LUT=314,HLS_VERSION=2024_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [0:0] a_WEN_A;
output  [7:0] a_Din_A;
input  [7:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [0:0] b_WEN_A;
output  [7:0] b_Din_A;
input  [7:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
wire   [0:0] icmp_ln19_fu_325_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] select_ln19_fu_188_p3;
reg   [1:0] select_ln19_reg_397;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] empty_fu_216_p2;
reg   [3:0] empty_reg_404;
wire   [3:0] zext_ln26_fu_233_p1;
reg   [3:0] zext_ln26_reg_416;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
wire   [3:0] add_ln28_fu_300_p2;
reg   [3:0] add_ln28_reg_461;
wire   [0:0] icmp_ln21_fu_319_p2;
reg   [0:0] icmp_ln21_reg_471;
reg   [0:0] icmp_ln19_reg_476;
wire  signed [15:0] mul_ln26_fu_349_p2;
wire   [15:0] grp_fu_359_p3;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] ap_phi_mux_icmp_ln214_phi_fu_154_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire   [63:0] p_cast7_fu_228_p1;
wire   [63:0] zext_ln26_3_fu_243_p1;
wire   [63:0] p_cast6_fu_258_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln26_2_fu_276_p1;
wire   [63:0] p_cast_fu_288_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln21_fu_296_p1;
wire   [63:0] zext_ln28_fu_355_p1;
reg   [3:0] indvar_flatten1_fu_68;
wire   [3:0] add_ln19_1_fu_313_p2;
reg   [1:0] i2_fu_72;
wire   [1:0] i_fu_196_p3;
reg   [1:0] ap_sig_allocacmp_i2_load;
reg   [1:0] j3_fu_76;
wire   [1:0] j_fu_308_p2;
reg   [1:0] ap_sig_allocacmp_j3_load;
reg    a_EN_A_local;
reg   [31:0] a_Addr_A_orig;
reg    b_EN_A_local;
reg   [31:0] b_Addr_A_orig;
reg    res_we0_local;
wire   [15:0] grp_fu_367_p3;
reg    res_ce0_local;
wire   [1:0] add_ln19_fu_182_p2;
wire   [3:0] p_shl_fu_208_p3;
wire   [3:0] select_ln19_1_cast_fu_204_p1;
wire   [3:0] empty_6_fu_222_p2;
wire   [3:0] add_ln26_2_fu_237_p2;
wire   [3:0] empty_5_fu_253_p2;
wire   [2:0] zext_ln26_1_fu_267_p1;
wire   [2:0] add_ln26_1_fu_270_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_387;
reg    ap_condition_178;
reg    ap_condition_392;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten1_fu_68 = 4'd0;
#0 i2_fu_72 = 2'd0;
#0 j3_fu_76 = 2'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(b_Dout_A),
    .din1(a_Dout_A),
    .dout(mul_ln26_fu_349_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_Dout_A),
    .din1(a_Dout_A),
    .din2(mul_ln26_fu_349_p2),
    .ce(1'b1),
    .dout(grp_fu_359_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_Dout_A),
    .din1(a_Dout_A),
    .din2(grp_fu_359_p3),
    .ce(1'b1),
    .dout(grp_fu_367_p3)
);

matrixmul_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage2_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_178)) begin
        i2_fu_72 <= i_fu_196_p3;
    end
end

always @ (posedge ap_clk) begin
if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
    if ((1'b1 == ap_condition_392)) begin
        indvar_flatten1_fu_68 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        indvar_flatten1_fu_68 <= add_ln19_1_fu_313_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
    if ((1'b1 == ap_condition_392)) begin
        j3_fu_76 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        j3_fu_76 <= j_fu_308_p2;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln28_reg_461 <= add_ln28_fu_300_p2;
        icmp_ln19_reg_476 <= icmp_ln19_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_404 <= empty_fu_216_p2;
        select_ln19_reg_397 <= select_ln19_fu_188_p3;
        zext_ln26_reg_416[1 : 0] <= zext_ln26_fu_233_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln21_reg_471 <= icmp_ln21_fu_319_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_Addr_A_orig = p_cast_fu_288_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_Addr_A_orig = p_cast6_fu_258_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_Addr_A_orig = p_cast7_fu_228_p1;
        end else begin
            a_Addr_A_orig = 'bx;
        end
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_EN_A_local = 1'b1;
    end else begin
        a_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_325_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_387)) begin
            ap_phi_mux_icmp_ln214_phi_fu_154_p4 = icmp_ln21_reg_471;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln214_phi_fu_154_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln214_phi_fu_154_p4 = icmp_ln21_reg_471;
        end
    end else begin
        ap_phi_mux_icmp_ln214_phi_fu_154_p4 = icmp_ln21_reg_471;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i2_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i2_load = i2_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j3_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j3_load = j3_fu_76;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_Addr_A_orig = zext_ln21_fu_296_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_Addr_A_orig = zext_ln26_2_fu_276_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_Addr_A_orig = zext_ln26_3_fu_243_p1;
        end else begin
            b_Addr_A_orig = 'bx;
        end
    end else begin
        b_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_EN_A_local = 1'b1;
    end else begin
        b_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_ce0_local = 1'b1;
    end else begin
        res_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_we0_local = 1'b1;
    end else begin
        res_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << 32'd0;

assign a_Clk_A = ap_clk;

assign a_Din_A = 8'd0;

assign a_EN_A = a_EN_A_local;

assign a_Rst_A = ap_rst;

assign a_WEN_A = 1'd0;

assign add_ln19_1_fu_313_p2 = (indvar_flatten1_fu_68 + 4'd1);

assign add_ln19_fu_182_p2 = (ap_sig_allocacmp_i2_load + 2'd1);

assign add_ln26_1_fu_270_p2 = (zext_ln26_1_fu_267_p1 + 3'd3);

assign add_ln26_2_fu_237_p2 = (zext_ln26_fu_233_p1 + 4'd6);

assign add_ln28_fu_300_p2 = (empty_reg_404 + zext_ln26_reg_416);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_178 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_387 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_reg_476 == 1'd0));
end

always @ (*) begin
    ap_condition_392 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_ready = ap_ready_sig;

assign b_Addr_A = b_Addr_A_orig << 32'd0;

assign b_Clk_A = ap_clk;

assign b_Din_A = 8'd0;

assign b_EN_A = b_EN_A_local;

assign b_Rst_A = ap_rst;

assign b_WEN_A = 1'd0;

assign empty_5_fu_253_p2 = (empty_reg_404 + 4'd1);

assign empty_6_fu_222_p2 = (empty_fu_216_p2 + 4'd2);

assign empty_fu_216_p2 = (p_shl_fu_208_p3 - select_ln19_1_cast_fu_204_p1);

assign i_fu_196_p3 = ((ap_phi_mux_icmp_ln214_phi_fu_154_p4[0:0] == 1'b1) ? add_ln19_fu_182_p2 : ap_sig_allocacmp_i2_load);

assign icmp_ln19_fu_325_p2 = ((indvar_flatten1_fu_68 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_319_p2 = ((j_fu_308_p2 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_308_p2 = (select_ln19_reg_397 + 2'd1);

assign p_cast6_fu_258_p1 = empty_5_fu_253_p2;

assign p_cast7_fu_228_p1 = empty_6_fu_222_p2;

assign p_cast_fu_288_p1 = empty_reg_404;

assign p_shl_fu_208_p3 = {{i_fu_196_p3}, {2'd0}};

assign res_address0 = zext_ln28_fu_355_p1;

assign res_ce0 = res_ce0_local;

assign res_d0 = grp_fu_367_p3;

assign res_we0 = res_we0_local;

assign select_ln19_1_cast_fu_204_p1 = i_fu_196_p3;

assign select_ln19_fu_188_p3 = ((ap_phi_mux_icmp_ln214_phi_fu_154_p4[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j3_load);

assign zext_ln21_fu_296_p1 = select_ln19_reg_397;

assign zext_ln26_1_fu_267_p1 = select_ln19_reg_397;

assign zext_ln26_2_fu_276_p1 = add_ln26_1_fu_270_p2;

assign zext_ln26_3_fu_243_p1 = add_ln26_2_fu_237_p2;

assign zext_ln26_fu_233_p1 = select_ln19_fu_188_p3;

assign zext_ln28_fu_355_p1 = add_ln28_reg_461;

always @ (posedge ap_clk) begin
    zext_ln26_reg_416[3:2] <= 2'b00;
end

endmodule //matrixmul
