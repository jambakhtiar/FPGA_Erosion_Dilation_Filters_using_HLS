-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.022000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=114,HLS_SYN_LUT=241,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln19_fu_107_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln19_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln26_fu_125_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln26_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_137_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln28_fu_147_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Product_fu_81_ap_start : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_ap_done : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_ap_idle : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_ap_ready : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Product_fu_81_a_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Product_fu_81_b_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Product_fu_81_tmp_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Product_fu_81_tmp_out_ap_vld : STD_LOGIC;
    signal j_reg_69 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln19_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln21_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln28_1_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal res_we0_local : STD_LOGIC;
    signal res_ce0_local : STD_LOGIC;
    signal p_shl_fu_117_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_113_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_143_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_matrixmul_Pipeline_Product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mul_ln26_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln21 : IN STD_LOGIC_VECTOR (1 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_matrixmul_Pipeline_Product_fu_81 : component matrixmul_matrixmul_Pipeline_Product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixmul_Pipeline_Product_fu_81_ap_start,
        ap_done => grp_matrixmul_Pipeline_Product_fu_81_ap_done,
        ap_idle => grp_matrixmul_Pipeline_Product_fu_81_ap_idle,
        ap_ready => grp_matrixmul_Pipeline_Product_fu_81_ap_ready,
        mul_ln26_1 => sub_ln26_reg_185,
        a_address0 => grp_matrixmul_Pipeline_Product_fu_81_a_address0,
        a_ce0 => grp_matrixmul_Pipeline_Product_fu_81_a_ce0,
        a_q0 => a_q0,
        zext_ln21 => j_reg_69,
        b_address0 => grp_matrixmul_Pipeline_Product_fu_81_b_address0,
        b_ce0 => grp_matrixmul_Pipeline_Product_fu_81_b_ce0,
        b_q0 => b_q0,
        tmp_out => grp_matrixmul_Pipeline_Product_fu_81_tmp_out,
        tmp_out_ap_vld => grp_matrixmul_Pipeline_Product_fu_81_tmp_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln21_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_Pipeline_Product_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_48 <= ap_const_lv2_0;
            elsif (((icmp_ln21_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_48 <= add_ln19_reg_180;
            end if; 
        end if;
    end process;

    j_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_69 <= add_ln21_reg_194;
            elsif (((icmp_ln19_fu_101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_69 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_reg_180 <= add_ln19_fu_107_p2;
                sub_ln26_reg_185 <= sub_ln26_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln21_reg_194 <= add_ln21_fu_137_p2;
                add_ln28_reg_199 <= add_ln28_fu_147_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_matrixmul_Pipeline_Product_fu_81_ap_done, icmp_ln19_fu_101_p2, icmp_ln21_fu_131_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln21_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_matrixmul_Pipeline_Product_fu_81_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address0 <= grp_matrixmul_Pipeline_Product_fu_81_a_address0;
    a_ce0 <= grp_matrixmul_Pipeline_Product_fu_81_a_ce0;
    add_ln19_fu_107_p2 <= std_logic_vector(unsigned(i_fu_48) + unsigned(ap_const_lv2_1));
    add_ln21_fu_137_p2 <= std_logic_vector(unsigned(j_reg_69) + unsigned(ap_const_lv2_1));
    add_ln28_fu_147_p2 <= std_logic_vector(unsigned(sub_ln26_reg_185) + unsigned(zext_ln28_fu_143_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_matrixmul_Pipeline_Product_fu_81_ap_done)
    begin
        if ((grp_matrixmul_Pipeline_Product_fu_81_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_101_p2)
    begin
        if (((icmp_ln19_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_101_p2)
    begin
        if (((icmp_ln19_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= grp_matrixmul_Pipeline_Product_fu_81_b_address0;
    b_ce0 <= grp_matrixmul_Pipeline_Product_fu_81_b_ce0;
    grp_matrixmul_Pipeline_Product_fu_81_ap_start <= grp_matrixmul_Pipeline_Product_fu_81_ap_start_reg;
    icmp_ln19_fu_101_p2 <= "1" when (i_fu_48 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_131_p2 <= "1" when (j_reg_69 = ap_const_lv2_3) else "0";
    p_shl_fu_117_p3 <= (i_fu_48 & ap_const_lv2_0);
    res_address0 <= zext_ln28_1_fu_156_p1(4 - 1 downto 0);
    res_ce0 <= res_ce0_local;

    res_ce0_local_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_ce0_local <= ap_const_logic_1;
        else 
            res_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= grp_matrixmul_Pipeline_Product_fu_81_tmp_out;
    res_we0 <= res_we0_local;

    res_we0_local_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_we0_local <= ap_const_logic_1;
        else 
            res_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln26_fu_125_p2 <= std_logic_vector(unsigned(p_shl_fu_117_p3) - unsigned(zext_ln26_fu_113_p1));
    zext_ln26_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_48),4));
    zext_ln28_1_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_199),64));
    zext_ln28_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_69),4));
end behav;
