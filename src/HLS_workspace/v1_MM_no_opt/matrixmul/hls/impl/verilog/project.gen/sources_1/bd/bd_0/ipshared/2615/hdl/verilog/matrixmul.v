// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.673000,HLS_SYN_LAT=160,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=46,HLS_SYN_LUT=189,HLS_VERSION=2024_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln19_fu_141_p2;
reg   [1:0] add_ln19_reg_271;
wire    ap_CS_fsm_state2;
wire   [3:0] sub_ln26_fu_159_p2;
reg   [3:0] sub_ln26_reg_276;
wire   [1:0] add_ln21_fu_171_p2;
reg   [1:0] add_ln21_reg_285;
wire    ap_CS_fsm_state3;
wire   [3:0] zext_ln28_fu_177_p1;
reg   [3:0] zext_ln28_reg_290;
reg   [3:0] res_addr_reg_295;
wire   [1:0] add_ln24_fu_201_p2;
reg   [1:0] add_ln24_reg_303;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [15:0] grp_fu_253_p3;
wire    ap_CS_fsm_state8;
reg   [1:0] j_reg_92;
wire   [0:0] icmp_ln19_fu_135_p2;
wire   [0:0] icmp_ln24_fu_195_p2;
reg   [1:0] k_reg_103;
wire   [0:0] icmp_ln21_fu_165_p2;
reg   [15:0] tmp_reg_114;
wire   [63:0] zext_ln28_1_fu_186_p1;
wire   [63:0] zext_ln26_2_fu_216_p1;
wire   [63:0] zext_ln26_3_fu_240_p1;
reg   [1:0] i_fu_50;
reg    a_ce0_local;
reg    b_ce0_local;
reg    res_we0_local;
reg    res_ce0_local;
wire   [3:0] p_shl7_fu_151_p3;
wire   [3:0] zext_ln26_fu_147_p1;
wire   [3:0] add_ln28_fu_181_p2;
wire   [3:0] zext_ln26_1_fu_207_p1;
wire   [3:0] add_ln26_fu_211_p2;
wire   [3:0] p_shl_fu_221_p3;
wire   [3:0] sub_ln26_1_fu_229_p2;
wire   [3:0] add_ln26_1_fu_235_p2;
wire    ap_CS_fsm_state7;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 i_fu_50 = 2'd0;
end

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .din1(a_q0),
    .din2(tmp_reg_114),
    .ce(1'b1),
    .dout(grp_fu_253_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_50 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_165_p2 == 1'd1))) begin
        i_fu_50 <= add_ln19_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_195_p2 == 1'd1))) begin
        j_reg_92 <= add_ln21_reg_285;
    end else if (((icmp_ln19_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_92 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_103 <= add_ln24_reg_303;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_165_p2 == 1'd0))) begin
        k_reg_103 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_114 <= grp_fu_253_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_165_p2 == 1'd0))) begin
        tmp_reg_114 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_reg_271 <= add_ln19_fu_141_p2;
        sub_ln26_reg_276 <= sub_ln26_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln21_reg_285 <= add_ln21_fu_171_p2;
        res_addr_reg_295 <= zext_ln28_1_fu_186_p1;
        zext_ln28_reg_290[1 : 0] <= zext_ln28_fu_177_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln24_reg_303 <= add_ln24_fu_201_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0_local = 1'b1;
    end else begin
        a_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln19_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0_local = 1'b1;
    end else begin
        b_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_ce0_local = 1'b1;
    end else begin
        res_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_195_p2 == 1'd1))) begin
        res_we0_local = 1'b1;
    end else begin
        res_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln26_2_fu_216_p1;

assign a_ce0 = a_ce0_local;

assign add_ln19_fu_141_p2 = (i_fu_50 + 2'd1);

assign add_ln21_fu_171_p2 = (j_reg_92 + 2'd1);

assign add_ln24_fu_201_p2 = (k_reg_103 + 2'd1);

assign add_ln26_1_fu_235_p2 = (sub_ln26_1_fu_229_p2 + zext_ln28_reg_290);

assign add_ln26_fu_211_p2 = (sub_ln26_reg_276 + zext_ln26_1_fu_207_p1);

assign add_ln28_fu_181_p2 = (sub_ln26_reg_276 + zext_ln28_fu_177_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign b_address0 = zext_ln26_3_fu_240_p1;

assign b_ce0 = b_ce0_local;

assign icmp_ln19_fu_135_p2 = ((i_fu_50 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_165_p2 = ((j_reg_92 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_195_p2 = ((k_reg_103 == 2'd3) ? 1'b1 : 1'b0);

assign p_shl7_fu_151_p3 = {{i_fu_50}, {2'd0}};

assign p_shl_fu_221_p3 = {{k_reg_103}, {2'd0}};

assign res_address0 = res_addr_reg_295;

assign res_ce0 = res_ce0_local;

assign res_d0 = tmp_reg_114;

assign res_we0 = res_we0_local;

assign sub_ln26_1_fu_229_p2 = (p_shl_fu_221_p3 - zext_ln26_1_fu_207_p1);

assign sub_ln26_fu_159_p2 = (p_shl7_fu_151_p3 - zext_ln26_fu_147_p1);

assign zext_ln26_1_fu_207_p1 = k_reg_103;

assign zext_ln26_2_fu_216_p1 = add_ln26_fu_211_p2;

assign zext_ln26_3_fu_240_p1 = add_ln26_1_fu_235_p2;

assign zext_ln26_fu_147_p1 = i_fu_50;

assign zext_ln28_1_fu_186_p1 = add_ln28_fu_181_p2;

assign zext_ln28_fu_177_p1 = j_reg_92;

always @ (posedge ap_clk) begin
    zext_ln28_reg_290[3:2] <= 2'b00;
end

endmodule //matrixmul
