// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.972000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=231,HLS_SYN_LUT=353,HLS_VERSION=2024_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state11 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [0:0] a_0_WEN_A;
output  [7:0] a_0_Din_A;
input  [7:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [0:0] a_1_WEN_A;
output  [7:0] a_1_Din_A;
input  [7:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [0:0] a_2_WEN_A;
output  [7:0] a_2_Din_A;
input  [7:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [0:0] b_0_WEN_A;
output  [7:0] b_0_Din_A;
input  [7:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [0:0] b_1_WEN_A;
output  [7:0] b_1_Din_A;
input  [7:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [0:0] b_2_WEN_A;
output  [7:0] b_2_Din_A;
input  [7:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] icmp_ln214_reg_240;
reg   [7:0] b_0_load_reg_502;
wire    ap_CS_fsm_state2;
reg   [7:0] b_1_load_reg_507;
reg   [7:0] b_2_load_reg_512;
reg   [7:0] b_0_load_1_reg_532;
wire    ap_CS_fsm_state3;
reg   [7:0] b_1_load_1_reg_537;
reg   [7:0] b_2_load_1_reg_542;
reg   [7:0] b_0_load_2_reg_562;
wire    ap_CS_fsm_state4;
reg   [7:0] b_1_load_2_reg_567;
reg   [7:0] b_2_load_2_reg_572;
wire   [1:0] select_ln16_fu_281_p3;
reg   [1:0] select_ln16_reg_577;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] select_ln16_reg_577_pp0_iter1_reg;
reg   [1:0] select_ln16_reg_577_pp0_iter2_reg;
reg   [1:0] select_ln16_reg_577_pp0_iter3_reg;
reg   [1:0] select_ln16_reg_577_pp0_iter4_reg;
wire   [1:0] i_fu_289_p3;
reg   [1:0] i_reg_585;
reg   [1:0] i_reg_585_pp0_iter1_reg;
reg   [1:0] i_reg_585_pp0_iter2_reg;
reg   [1:0] i_reg_585_pp0_iter3_reg;
reg   [1:0] i_reg_585_pp0_iter4_reg;
wire   [63:0] zext_ln19_fu_297_p1;
reg   [63:0] zext_ln19_reg_591;
reg   [63:0] zext_ln19_reg_591_pp0_iter1_reg;
wire   [0:0] icmp_ln21_fu_314_p2;
reg   [0:0] icmp_ln21_reg_602;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln19_fu_320_p2;
reg   [0:0] icmp_ln19_reg_607;
wire  signed [15:0] mul_ln26_fu_413_p2;
wire   [15:0] grp_fu_449_p3;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_phi_mux_icmp_ln214_phi_fu_244_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_2_fu_444_p1;
reg   [3:0] indvar_flatten1_fu_80;
wire   [3:0] add_ln19_1_fu_308_p2;
reg   [1:0] i2_fu_84;
reg   [1:0] j3_fu_88;
wire   [1:0] j_fu_302_p2;
reg    b_0_EN_A_local;
reg   [31:0] b_0_Addr_A_orig;
reg    b_1_EN_A_local;
reg   [31:0] b_1_Addr_A_orig;
reg    b_2_EN_A_local;
reg   [31:0] b_2_Addr_A_orig;
reg    a_2_EN_A_local;
wire   [31:0] a_2_Addr_A_orig;
reg    a_1_EN_A_local;
wire   [31:0] a_1_Addr_A_orig;
reg    a_0_EN_A_local;
wire   [31:0] a_0_Addr_A_orig;
reg    res_we0_local;
wire   [15:0] grp_fu_457_p3;
reg    res_ce0_local;
wire   [1:0] add_ln19_fu_275_p2;
wire   [7:0] tmp_2_fu_345_p7;
wire  signed [7:0] tmp_2_fu_345_p9;
wire   [7:0] tmp_1_fu_369_p7;
wire  signed [7:0] tmp_1_fu_369_p9;
wire   [7:0] tmp_fu_393_p7;
wire  signed [7:0] tmp_fu_393_p9;
wire   [3:0] p_shl_fu_422_p3;
wire   [3:0] zext_ln28_fu_419_p1;
wire   [3:0] sub_ln28_fu_429_p2;
wire   [3:0] zext_ln28_1_fu_435_p1;
wire   [3:0] add_ln28_fu_438_p2;
wire    ap_CS_fsm_state11;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [1:0] tmp_2_fu_345_p1;
wire   [1:0] tmp_2_fu_345_p3;
wire  signed [1:0] tmp_2_fu_345_p5;
wire   [1:0] tmp_1_fu_369_p1;
wire   [1:0] tmp_1_fu_369_p3;
wire  signed [1:0] tmp_1_fu_369_p5;
wire   [1:0] tmp_fu_393_p1;
wire   [1:0] tmp_fu_393_p3;
wire  signed [1:0] tmp_fu_393_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 indvar_flatten1_fu_80 = 4'd0;
#0 i2_fu_84 = 2'd0;
#0 j3_fu_88 = 2'd0;
end

(* dissolve_hierarchy = "yes" *) matrixmul_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U1(
    .din0(b_0_load_2_reg_562),
    .din1(b_1_load_2_reg_567),
    .din2(b_2_load_2_reg_572),
    .def(tmp_2_fu_345_p7),
    .sel(select_ln16_reg_577),
    .dout(tmp_2_fu_345_p9)
);

(* dissolve_hierarchy = "yes" *) matrixmul_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U2(
    .din0(b_0_load_1_reg_532),
    .din1(b_1_load_1_reg_537),
    .din2(b_2_load_1_reg_542),
    .def(tmp_1_fu_369_p7),
    .sel(select_ln16_reg_577_pp0_iter1_reg),
    .dout(tmp_1_fu_369_p9)
);

(* dissolve_hierarchy = "yes" *) matrixmul_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U3(
    .din0(b_0_load_reg_502),
    .din1(b_1_load_reg_507),
    .din2(b_2_load_reg_512),
    .def(tmp_fu_393_p7),
    .sel(select_ln16_reg_577_pp0_iter2_reg),
    .dout(tmp_fu_393_p9)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U4(
    .din0(tmp_fu_393_p9),
    .din1(a_0_Dout_A),
    .dout(mul_ln26_fu_413_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_fu_345_p9),
    .din1(a_2_Dout_A),
    .din2(mul_ln26_fu_413_p2),
    .ce(1'b1),
    .dout(grp_fu_449_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_fu_369_p9),
    .din1(a_1_Dout_A),
    .din2(grp_fu_449_p3),
    .ce(1'b1),
    .dout(grp_fu_457_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i2_fu_84 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i2_fu_84 <= i_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln214_reg_240 <= icmp_ln21_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln214_reg_240 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten1_fu_80 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten1_fu_80 <= add_ln19_1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j3_fu_88 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j3_fu_88 <= j_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_0_load_1_reg_532 <= b_0_Dout_A;
        b_1_load_1_reg_537 <= b_1_Dout_A;
        b_2_load_1_reg_542 <= b_2_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_0_load_2_reg_562 <= b_0_Dout_A;
        b_1_load_2_reg_567 <= b_1_Dout_A;
        b_2_load_2_reg_572 <= b_2_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_0_load_reg_502 <= b_0_Dout_A;
        b_1_load_reg_507 <= b_1_Dout_A;
        b_2_load_reg_512 <= b_2_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_585 <= i_fu_289_p3;
        i_reg_585_pp0_iter1_reg <= i_reg_585;
        icmp_ln19_reg_607 <= icmp_ln19_fu_320_p2;
        select_ln16_reg_577 <= select_ln16_fu_281_p3;
        select_ln16_reg_577_pp0_iter1_reg <= select_ln16_reg_577;
        zext_ln19_reg_591[1 : 0] <= zext_ln19_fu_297_p1[1 : 0];
        zext_ln19_reg_591_pp0_iter1_reg[1 : 0] <= zext_ln19_reg_591[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_585_pp0_iter2_reg <= i_reg_585_pp0_iter1_reg;
        i_reg_585_pp0_iter3_reg <= i_reg_585_pp0_iter2_reg;
        i_reg_585_pp0_iter4_reg <= i_reg_585_pp0_iter3_reg;
        select_ln16_reg_577_pp0_iter2_reg <= select_ln16_reg_577_pp0_iter1_reg;
        select_ln16_reg_577_pp0_iter3_reg <= select_ln16_reg_577_pp0_iter2_reg;
        select_ln16_reg_577_pp0_iter4_reg <= select_ln16_reg_577_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln21_reg_602 <= icmp_ln21_fu_314_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_0_EN_A_local = 1'b1;
    end else begin
        a_0_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_1_EN_A_local = 1'b1;
    end else begin
        a_1_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_2_EN_A_local = 1'b1;
    end else begin
        a_2_EN_A_local = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_fu_320_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_icmp_ln214_phi_fu_244_p4 = icmp_ln21_reg_602;
    end else begin
        ap_phi_mux_icmp_ln214_phi_fu_244_p4 = icmp_ln214_reg_240;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_0_Addr_A_orig = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_0_Addr_A_orig = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_0_Addr_A_orig = 64'd0;
    end else begin
        b_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_0_EN_A_local = 1'b1;
    end else begin
        b_0_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_1_Addr_A_orig = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_1_Addr_A_orig = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_1_Addr_A_orig = 64'd0;
    end else begin
        b_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_1_EN_A_local = 1'b1;
    end else begin
        b_1_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_2_Addr_A_orig = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_2_Addr_A_orig = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_2_Addr_A_orig = 64'd0;
    end else begin
        b_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_2_EN_A_local = 1'b1;
    end else begin
        b_2_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_ce0_local = 1'b1;
    end else begin
        res_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_we0_local = 1'b1;
    end else begin
        res_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << 32'd0;

assign a_0_Addr_A_orig = zext_ln19_reg_591_pp0_iter1_reg;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = 8'd0;

assign a_0_EN_A = a_0_EN_A_local;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = 1'd0;

assign a_1_Addr_A = a_1_Addr_A_orig << 32'd0;

assign a_1_Addr_A_orig = zext_ln19_reg_591;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = 8'd0;

assign a_1_EN_A = a_1_EN_A_local;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = 1'd0;

assign a_2_Addr_A = a_2_Addr_A_orig << 32'd0;

assign a_2_Addr_A_orig = zext_ln19_fu_297_p1;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = 8'd0;

assign a_2_EN_A = a_2_EN_A_local;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = 1'd0;

assign add_ln19_1_fu_308_p2 = (indvar_flatten1_fu_80 + 4'd1);

assign add_ln19_fu_275_p2 = (i2_fu_84 + 2'd1);

assign add_ln28_fu_438_p2 = (sub_ln28_fu_429_p2 + zext_ln28_1_fu_435_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_0_Addr_A = b_0_Addr_A_orig << 32'd0;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = 8'd0;

assign b_0_EN_A = b_0_EN_A_local;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = 1'd0;

assign b_1_Addr_A = b_1_Addr_A_orig << 32'd0;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = 8'd0;

assign b_1_EN_A = b_1_EN_A_local;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = 1'd0;

assign b_2_Addr_A = b_2_Addr_A_orig << 32'd0;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = 8'd0;

assign b_2_EN_A = b_2_EN_A_local;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = 1'd0;

assign i_fu_289_p3 = ((ap_phi_mux_icmp_ln214_phi_fu_244_p4[0:0] == 1'b1) ? add_ln19_fu_275_p2 : i2_fu_84);

assign icmp_ln19_fu_320_p2 = ((indvar_flatten1_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_314_p2 = ((j_fu_302_p2 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_302_p2 = (select_ln16_fu_281_p3 + 2'd1);

assign p_shl_fu_422_p3 = {{i_reg_585_pp0_iter4_reg}, {2'd0}};

assign res_address0 = zext_ln28_2_fu_444_p1;

assign res_ce0 = res_ce0_local;

assign res_d0 = grp_fu_457_p3;

assign res_we0 = res_we0_local;

assign select_ln16_fu_281_p3 = ((ap_phi_mux_icmp_ln214_phi_fu_244_p4[0:0] == 1'b1) ? 2'd0 : j3_fu_88);

assign sub_ln28_fu_429_p2 = (p_shl_fu_422_p3 - zext_ln28_fu_419_p1);

assign tmp_1_fu_369_p7 = 'bx;

assign tmp_2_fu_345_p7 = 'bx;

assign tmp_fu_393_p7 = 'bx;

assign zext_ln19_fu_297_p1 = i_fu_289_p3;

assign zext_ln28_1_fu_435_p1 = select_ln16_reg_577_pp0_iter4_reg;

assign zext_ln28_2_fu_444_p1 = add_ln28_fu_438_p2;

assign zext_ln28_fu_419_p1 = i_reg_585_pp0_iter4_reg;

always @ (posedge ap_clk) begin
    zext_ln19_reg_591[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_591_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixmul
