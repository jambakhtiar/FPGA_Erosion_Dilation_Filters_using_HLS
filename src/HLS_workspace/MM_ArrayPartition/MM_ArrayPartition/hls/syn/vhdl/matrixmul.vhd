-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.972000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=231,HLS_SYN_LUT=353,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln214_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_0_load_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_1_load_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_2_load_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_0_load_1_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal b_1_load_1_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_2_load_1_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_0_load_2_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal b_1_load_2_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_2_load_2_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln16_fu_281_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_577 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln16_reg_577_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_577_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_577_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_577_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_289_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_585 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_585_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_585_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_585_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_585_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_591_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln19_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_449_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_icmp_ln214_phi_fu_244_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_2_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln19_1_fu_308_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_fu_84 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal j3_fu_88 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal j_fu_302_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_0_EN_A_local : STD_LOGIC;
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_EN_A_local : STD_LOGIC;
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_EN_A_local : STD_LOGIC;
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_EN_A_local : STD_LOGIC;
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_EN_A_local : STD_LOGIC;
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_EN_A_local : STD_LOGIC;
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal res_we0_local : STD_LOGIC;
    signal grp_fu_457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_ce0_local : STD_LOGIC;
    signal add_ln19_fu_275_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_345_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_345_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_369_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_369_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_393_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_393_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_422_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln28_fu_429_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_1_fu_435_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_438_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_2_fu_345_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_345_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_345_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_369_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_369_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_369_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_393_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_393_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_393_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    sparsemux_7_2_8_1_1_U1 : component matrixmul_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_load_2_reg_562,
        din1 => b_1_load_2_reg_567,
        din2 => b_2_load_2_reg_572,
        def => tmp_2_fu_345_p7,
        sel => select_ln16_reg_577,
        dout => tmp_2_fu_345_p9);

    sparsemux_7_2_8_1_1_U2 : component matrixmul_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_load_1_reg_532,
        din1 => b_1_load_1_reg_537,
        din2 => b_2_load_1_reg_542,
        def => tmp_1_fu_369_p7,
        sel => select_ln16_reg_577_pp0_iter1_reg,
        dout => tmp_1_fu_369_p9);

    sparsemux_7_2_8_1_1_U3 : component matrixmul_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_load_reg_502,
        din1 => b_1_load_reg_507,
        din2 => b_2_load_reg_512,
        def => tmp_fu_393_p7,
        sel => select_ln16_reg_577_pp0_iter2_reg,
        dout => tmp_fu_393_p9);

    mul_8s_8s_16_1_1_U4 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_fu_393_p9,
        din1 => a_0_Dout_A,
        dout => mul_ln26_fu_413_p2);

    mac_muladd_8s_8s_16s_16_4_1_U5 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_fu_345_p9,
        din1 => a_2_Dout_A,
        din2 => mul_ln26_fu_413_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U6 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_fu_369_p9,
        din1 => a_1_Dout_A,
        din2 => grp_fu_449_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i2_fu_84 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_fu_84 <= i_fu_289_p3;
            end if; 
        end if;
    end process;

    icmp_ln214_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln19_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                icmp_ln214_reg_240 <= icmp_ln21_reg_602;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                icmp_ln214_reg_240 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten1_fu_80 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten1_fu_80 <= add_ln19_1_fu_308_p2;
            end if; 
        end if;
    end process;

    j3_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j3_fu_88 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j3_fu_88 <= j_fu_302_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_0_load_1_reg_532 <= b_0_Dout_A;
                b_1_load_1_reg_537 <= b_1_Dout_A;
                b_2_load_1_reg_542 <= b_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                b_0_load_2_reg_562 <= b_0_Dout_A;
                b_1_load_2_reg_567 <= b_1_Dout_A;
                b_2_load_2_reg_572 <= b_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_0_load_reg_502 <= b_0_Dout_A;
                b_1_load_reg_507 <= b_1_Dout_A;
                b_2_load_reg_512 <= b_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_585 <= i_fu_289_p3;
                i_reg_585_pp0_iter1_reg <= i_reg_585;
                icmp_ln19_reg_607 <= icmp_ln19_fu_320_p2;
                select_ln16_reg_577 <= select_ln16_fu_281_p3;
                select_ln16_reg_577_pp0_iter1_reg <= select_ln16_reg_577;
                    zext_ln19_reg_591(1 downto 0) <= zext_ln19_fu_297_p1(1 downto 0);
                    zext_ln19_reg_591_pp0_iter1_reg(1 downto 0) <= zext_ln19_reg_591(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_reg_585_pp0_iter2_reg <= i_reg_585_pp0_iter1_reg;
                i_reg_585_pp0_iter3_reg <= i_reg_585_pp0_iter2_reg;
                i_reg_585_pp0_iter4_reg <= i_reg_585_pp0_iter3_reg;
                select_ln16_reg_577_pp0_iter2_reg <= select_ln16_reg_577_pp0_iter1_reg;
                select_ln16_reg_577_pp0_iter3_reg <= select_ln16_reg_577_pp0_iter2_reg;
                select_ln16_reg_577_pp0_iter4_reg <= select_ln16_reg_577_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln21_reg_602 <= icmp_ln21_fu_314_p2;
            end if;
        end if;
    end process;
    zext_ln19_reg_591(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln19_reg_591_pp0_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    a_0_Addr_A_orig <= zext_ln19_reg_591_pp0_iter1_reg(32 - 1 downto 0);
    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv8_0;
    a_0_EN_A <= a_0_EN_A_local;

    a_0_EN_A_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_0_EN_A_local <= ap_const_logic_1;
        else 
            a_0_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv1_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    a_1_Addr_A_orig <= zext_ln19_reg_591(32 - 1 downto 0);
    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv8_0;
    a_1_EN_A <= a_1_EN_A_local;

    a_1_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_1_EN_A_local <= ap_const_logic_1;
        else 
            a_1_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv1_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    a_2_Addr_A_orig <= zext_ln19_fu_297_p1(32 - 1 downto 0);
    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv8_0;
    a_2_EN_A <= a_2_EN_A_local;

    a_2_EN_A_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_2_EN_A_local <= ap_const_logic_1;
        else 
            a_2_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv1_0;
    add_ln19_1_fu_308_p2 <= std_logic_vector(unsigned(indvar_flatten1_fu_80) + unsigned(ap_const_lv4_1));
    add_ln19_fu_275_p2 <= std_logic_vector(unsigned(i2_fu_84) + unsigned(ap_const_lv2_1));
    add_ln28_fu_438_p2 <= std_logic_vector(unsigned(sub_ln28_fu_429_p2) + unsigned(zext_ln28_1_fu_435_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln19_fu_320_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln19_fu_320_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln214_phi_fu_244_p4_assign_proc : process(icmp_ln214_reg_240, ap_CS_fsm_pp0_stage0, icmp_ln21_reg_602, icmp_ln19_reg_607, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln19_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_icmp_ln214_phi_fu_244_p4 <= icmp_ln21_reg_602;
        else 
            ap_phi_mux_icmp_ln214_phi_fu_244_p4 <= icmp_ln214_reg_240;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_0_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_0_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_0_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        else 
            b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv8_0;
    b_0_EN_A <= b_0_EN_A_local;

    b_0_EN_A_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_0_EN_A_local <= ap_const_logic_1;
        else 
            b_0_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv1_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_1_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_1_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_1_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        else 
            b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv8_0;
    b_1_EN_A <= b_1_EN_A_local;

    b_1_EN_A_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_1_EN_A_local <= ap_const_logic_1;
        else 
            b_1_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv1_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_2_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_2_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_2_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        else 
            b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv8_0;
    b_2_EN_A <= b_2_EN_A_local;

    b_2_EN_A_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_2_EN_A_local <= ap_const_logic_1;
        else 
            b_2_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv1_0;
    i_fu_289_p3 <= 
        add_ln19_fu_275_p2 when (ap_phi_mux_icmp_ln214_phi_fu_244_p4(0) = '1') else 
        i2_fu_84;
    icmp_ln19_fu_320_p2 <= "1" when (indvar_flatten1_fu_80 = ap_const_lv4_8) else "0";
    icmp_ln21_fu_314_p2 <= "1" when (j_fu_302_p2 = ap_const_lv2_3) else "0";
    j_fu_302_p2 <= std_logic_vector(unsigned(select_ln16_fu_281_p3) + unsigned(ap_const_lv2_1));
    p_shl_fu_422_p3 <= (i_reg_585_pp0_iter4_reg & ap_const_lv2_0);
    res_address0 <= zext_ln28_2_fu_444_p1(4 - 1 downto 0);
    res_ce0 <= res_ce0_local;

    res_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_ce0_local <= ap_const_logic_1;
        else 
            res_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= grp_fu_457_p3;
    res_we0 <= res_we0_local;

    res_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_we0_local <= ap_const_logic_1;
        else 
            res_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln16_fu_281_p3 <= 
        ap_const_lv2_0 when (ap_phi_mux_icmp_ln214_phi_fu_244_p4(0) = '1') else 
        j3_fu_88;
    sub_ln28_fu_429_p2 <= std_logic_vector(unsigned(p_shl_fu_422_p3) - unsigned(zext_ln28_fu_419_p1));
    tmp_1_fu_369_p7 <= "XXXXXXXX";
    tmp_2_fu_345_p7 <= "XXXXXXXX";
    tmp_fu_393_p7 <= "XXXXXXXX";
    zext_ln19_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_289_p3),64));
    zext_ln28_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_577_pp0_iter4_reg),4));
    zext_ln28_2_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_438_p2),64));
    zext_ln28_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_585_pp0_iter4_reg),4));
end behav;
